name: Build Resume

# Trigger the workflow manually or on push to specific files
on:
  workflow_dispatch: # Allows manual triggering
  push:
    paths:
      - 'resume.md'                  # Trigger on changes to resume.md
      - 'resume.yml'                 # Trigger on changes to resume.yml
      - '.github/workflows/build-resume.yml'  # Trigger on changes to this workflow

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v4

      # Set up Python
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      # Install Pandoc and broader LaTeX dependencies
      - name: Install Pandoc
        run: |
          sudo apt-get update
          sudo apt-get install -y pandoc texlive-latex-base texlive-fonts-recommended texlive-latex-extra texlive-fonts-extra

      # Install Python dependencies
      - name: Install Python packages
        run: |
          pip install PyYAML

      # Generate PDF using Python script
      - name: Generate PDF File
        run: |
          python3 - <<EOF
          import pypandoc
          import yaml
          import os
          import time

          with open('resume.yml', 'r') as config_file:
              config = yaml.safe_load(config_file)

          source_file = config['source']
          pdf_output = config['output']['pdf']
          font_size = config['output']['format']['font-size']
          margins = config['output']['format']['margins']

          current_dir = os.getcwd()
          pdf_path = os.path.join(current_dir, pdf_output)

          pdf_args = [
              '--pdf-engine=pdflatex',
              f'-V geometry:margin={margins}in',
              f'-V fontsize={font_size}pt'
          ]
          try:
              pypandoc.convert_file(source_file, 'pdf', outputfile=pdf_path, extra_args=pdf_args)
              print(f"PDF generated at: {pdf_path} (size: {os.path.getsize(pdf_path)} bytes)")
          except Exception as e:
              print(f"PDF conversion failed: {e}")

          time.sleep(1)
          EOF

      # Generate DOCX using direct Pandoc command with resume.yml
      - name: Generate DOCX File
        run: |
          python3 -c "import yaml; config = yaml.safe_load(open('resume.yml')); print(config['source'], config['output']['word'])" | {
            read source_file docx_output
            echo "Running Pandoc for DOCX conversion..."
            pandoc "$source_file" -o "$docx_output" --verbose
            if [ -f "$docx_output" ] && [ $(stat -c %s "$docx_output") -gt 0 ]; then
              echo "DOCX generated at: $(pwd)/$docx_output (size: $(stat -c %s "$docx_output") bytes)"
            else
              echo "DOCX conversion failed or produced empty file"
              ls -lh
              exit 1
            fi
          }

      # Verify files exist
      - name: Verify Files Exist
        run: |
          ls -lh
          if [ -f "resume.pdf" ]; then echo "PDF exists"; else echo "PDF missing"; exit 1; fi
          if [ -f "resume.docx" ] && [ $(stat -c %s resume.docx) -gt 0 ]; then echo "DOCX exists and non-empty"; else echo "DOCX missing or empty"; exit 1; fi

      # Upload raw files to a GitHub release
      - name: Upload Raw Files to Release
        run: |
          gh release create latest --title "Latest Resume" --notes "Auto-generated resume files" --draft || true
          gh release upload latest resume.pdf resume.docx --clobber
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}