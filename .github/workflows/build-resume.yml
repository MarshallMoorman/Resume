name: Build Resume

# Trigger the workflow manually or on push to specific files
on:
  workflow_dispatch: # Allows manual triggering
  push:
    paths:
      - 'resume.md'
      - 'resume.yml'
      - '.github/workflows/build-resume.yml'
      - 'custom-reference.docx'

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Checkout the repository with the latest commit
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: main  # Ensure we get the latest main branch

      # Set up Python
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      # Install Pandoc and LaTeX dependencies
      - name: Install Pandoc
        run: |
          sudo apt-get update
          sudo apt-get install -y pandoc texlive-latex-base texlive-fonts-recommended texlive-latex-extra texlive-fonts-extra

      # Install Python dependencies
      - name: Install Python packages
        run: |
          pip install pypandoc PyYAML

      # Generate PDF
      - name: Generate PDF File
        run: |
          python3 - <<EOF
          import pypandoc
          import yaml
          import os
          import time

          with open('resume.yml', 'r') as config_file:
              config = yaml.safe_load(config_file)

          source_file = config['source']
          pdf_output = config['output']['pdf']
          font_size = config['output']['format']['font-size']
          margins = config['output']['format']['margins']

          current_dir = os.getcwd()
          pdf_path = os.path.join(current_dir, pdf_output)

          pdf_args = [
              '--pdf-engine=pdflatex',
              f'-V geometry:margin={margins}in',
              f'-V fontsize={font_size}pt'
          ]
          try:
              pypandoc.convert_file(source_file, 'pdf', outputfile=pdf_path, extra_args=pdf_args)
              print(f"PDF generated at: {pdf_path} (size: {os.path.getsize(pdf_path)} bytes)")
          except Exception as e:
              print(f"PDF conversion failed: {e}")

          time.sleep(1)
          EOF

      # Generate DOCX with custom reference
      - name: Generate DOCX File
        run: |
          echo "Extracting source and output from resume.yml..."
          SOURCE_FILE=$(python3 -c "import yaml; print(yaml.safe_load(open('resume.yml'))['source'])")
          DOCX_OUTPUT=$(python3 -c "import yaml; print(yaml.safe_load(open('resume.yml'))['output']['word'])")
          echo "Running Pandoc for DOCX conversion: $SOURCE_FILE -> $DOCX_OUTPUT"
          if [ -f "custom-reference.docx" ]; then
            pandoc "$SOURCE_FILE" -o "$DOCX_OUTPUT" --verbose --reference-doc=custom-reference.docx
          else
            echo "Warning: custom-reference.docx not found, using default styling"
            pandoc "$SOURCE_FILE" -o "$DOCX_OUTPUT" --verbose
          fi
          if [ -f "$DOCX_OUTPUT" ] && [ $(stat -c %s "$DOCX_OUTPUT") -gt 0 ]; then
            echo "DOCX generated at: $(pwd)/$DOCX_OUTPUT (size: $(stat -c %s "$DOCX_OUTPUT") bytes)"
          else
            echo "DOCX conversion failed or produced empty file"
            ls -lh
            exit 1
          fi

      # Verify files exist
      - name: Verify Files Exist
        run: |
          ls -lh
          if [ -f "resume.pdf" ]; then echo "PDF exists"; else echo "PDF missing"; exit 1; fi
          if [ -f "resume.docx" ] && [ $(stat -c %s resume.docx) -gt 0 ]; then echo "DOCX exists and non-empty"; else echo "DOCX missing or empty"; exit 1; fi

      # Upload raw files to a GitHub release with retry
      - name: Upload Raw Files to Release
        run: |
          for attempt in {1..3}; do
            echo "Attempt $attempt to upload files..."
            gh release create latest --title "Latest Resume" --notes "Auto-generated resume files" --draft || true
            gh release upload latest resume.pdf resume.docx --clobber && break
            echo "Upload failed, retrying in 5 seconds..."
            sleep 5
          done
          if [ $attempt -eq 3 ]; then
            echo "Upload failed after 3 attempts"
            exit 1
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}